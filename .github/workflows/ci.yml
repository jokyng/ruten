name: Ruten CI & Build

on:
  push:
    branches: [main]
    tags:
      - 'v*'  # auto build on version tags
  pull_request:
    branches: [main]
  workflow_dispatch:  # run manually

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    name: Build & Test [${{ matrix.os }} / ${{ matrix.rust }}]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-

      - name: Build Release
        run: cargo build --release --verbose

      - name: Run Tests
        run: cargo test --verbose --all

      - name: Run Example Scripts (Linux/macOS only)
        if: runner.os != 'windows-latest'
        run: |
          echo "[+] Running example scripts"
          cargo run -- examples/blockchain.rt   || true
          cargo run -- examples/fibonacci.rtn   || true
          cargo run -- examples/math_demo.rtn   || true
          cargo run -- examples/crypto_demo.rtn || true

      - name: Package Binaries
        run: |
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            Copy-Item target\release\ruten.exe dist\ruten-windows.exe
            powershell Compress-Archive -Path dist\ruten-windows.exe -DestinationPath dist\ruten-windows.zip
          else
            cp target/release/ruten dist/ruten-${{ runner.os }}
            tar -czf dist/ruten-${{ runner.os }}.tar.gz -C dist ruten-${{ runner.os }}
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ruten-${{ matrix.os }}-${{ matrix.rust }}
          path: dist/*

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Rust + components
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Check Formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features || true

  release:
    name: Create Release
    needs: build-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
